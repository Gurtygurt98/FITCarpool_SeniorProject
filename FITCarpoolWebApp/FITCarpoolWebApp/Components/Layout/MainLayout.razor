@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <RadzenPanelMenuItem Text="Rider View" Path="Rider" Icon="motorcycle" />
            <RadzenPanelMenuItem Text="Driver View" Path="Driver" Icon="event_seat" />
            <AuthorizeView>
                <Authorized>
                    <RadzenPanelMenuItem Text="@context.User.Identity?.Name" Path="Account/Manage" Icon="user" />
                    <RadzenPanelMenuItem Text="Logout" Icon="sign-out" Click="@InvokeLogout" />
                </Authorized>
                <NotAuthorized>
                    <RadzenPanelMenuItem Text="Register" Path="Account/Register" Icon="edit" />
                    <RadzenPanelMenuItem Text="Login" Path="Account/Login" Icon="login" />
                </NotAuthorized>
            </AuthorizeView>

        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>

@code {
    bool sidebarExpanded = false;
    private string? currentUrl;
    // Runs on the page intialization, to get current user page and keep track of where they navigate to
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    // Used to keep track of the current user page
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    // Method to
    private async Task InvokeLogout()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('logoutForm').submit();");

    }
}