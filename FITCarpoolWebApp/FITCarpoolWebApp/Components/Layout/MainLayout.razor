@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject TooltipService tooltipService
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
<RadzenDialog />
<RadzenNotification />
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="FIT Carpool Group Finder" />
            <MudSpacer></MudSpacer>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudIconButton Href="/Admin" Icon="@Icons.Material.Filled.AdminPanelSettings"></MudIconButton>
                </Authorized>
            </AuthorizeView>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content; position: absolute">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false" >
            @*Need two because of overlap issues*@
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <AuthorizeView>
                <Authorized>
                    <RadzenPanelMenuItem Text="Profile" Path="Profile" Icon="account_circle" />
                    <RadzenPanelMenuItem Text="Preferences" Path="Preferences" Icon="psychology_alt" />
                    <RadzenPanelMenuItem Text="Rider View" Path="Rider" Icon="local_taxi" />
                    <RadzenPanelMenuItem Text="Driver View" Path="Driver" Icon="directions_car_filled" />
                    <RadzenPanelMenuItem Text="Find Groups" Path="Group-Find" Icon="group_work" />
                    <RadzenPanelMenuItem Text="Friends List" Path="Friends" Icon="supervised_user_circle" />
                    <RadzenPanelMenuItem Text="Directions" Path="Directions" Icon="directions" />
                    <RadzenPanelMenuItem Text="User Details" Path="User-Details" Icon="account_box" />
                    <RadzenPanelMenuItem Text="Privacy" Path="Privacy" Icon="verified_user" />
                    <RadzenPanelMenuItem Text="@context.User.Identity?.Name" Path="Account/Manage" Icon="manage_accounts" />
                    <RadzenPanelMenuItem Text="Logout" Icon="logout" Click="@InvokeLogout" />
                </Authorized>
                <NotAuthorized>
                    <RadzenPanelMenuItem Text="Register" Path="Account/Register" Icon="edit" />
                    <RadzenPanelMenuItem Text="Login" Path="Account/Login" Icon="login" />
                </NotAuthorized>
            </AuthorizeView>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <RadzenPanelMenuItem Text="Admin Home Page" Path="Admin" Icon="admin_panel_settings" />
                </Authorized>
            </AuthorizeView>


        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4" style="margin-left:5vh; margin-right:5vh" >
            @Body

        </div>
    </RadzenBody>
    <RadzenFooter>
        <div class="rz-p-4" style="margin-left:5vh; margin-right:5vh">
            This site is currently under construction by Austin Phillips, Hunter Smith, Jason Smith and Jacqueline Torres.
        </div>
    </RadzenFooter>
</RadzenLayout>
<form id="logoutForm" method="post" action="Account/Logout" style="display:none">
    <AntiforgeryToken />
    <input type="hidden" name="returnUrl" value="@currentUrl" />
    @* Include antiforgery token if necessary *@
</form>
@code {
    bool sidebarExpanded = false;
    private string? currentUrl;
    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Some content", options);

    // Runs on the page intialization, to get current user page and keep track of where they navigate to
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    // Used to keep track of the current user page
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    // Method to
    private async Task InvokeLogout()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('logoutForm').submit();");

    }
    private void NavigateTo(string page)
    {
        NavigationManager.NavigateTo($"/{page}");
    }
}