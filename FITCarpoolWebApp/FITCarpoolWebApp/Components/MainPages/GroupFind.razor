@page "/Group-Find"
@using MudBlazor
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@inject IUsersData _dbUsers
@attribute [Authorize]

<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%;">
        @for (int i = 0; i < GroupRecommendations.Count; i++)
        {
            if (groupVisibilities[i])
            {
                <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;">
                    <RadzenHeading Size="H2" Text=@($"Group Recommendation {i + 1}") />
                    <div>
                        <RadzenButton Text="Join Group" Style="margin-right: 10px;" Shade="Shade.Light" ButtonStyle="ButtonStyle.Success" />
                        <RadzenButton Text="Deny Recommendation" Shade="Shade.Light" ButtonStyle="ButtonStyle.Danger" Click="() => DenyGroup(i)" />
                    </div>
                </div>
                <RadzenDataGrid Data="@GroupRecommendations[i]" TItem="UsersModel" AllowSorting="true">
                    <Columns>

                        <RadzenDataGridColumn TItem="UsersModel" Width="60px">
                            <Template Context="user">
                                @if (user.ProfilePicture != null)
                                {
                                    <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(user.ProfilePicture)}")" alt="Profile Picture" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                                else
                                {
                                    <img src="https://cdn.create.vista.com/api/media/medium/137014128/stock-vector-user-profile-icon?token" alt="Default Profile" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Property="Email" Title="Email" Width="200px" />
                        <RadzenDataGridColumn TItem="UsersModel" Title="Name" Width="200px">
                            <Template Context="user">
                                @{
                                    var fullName = $"{user.FirstName} {user.LastName}";
                                }
                                <text>@fullName</text>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UsersModel" Title="Role" Width="100px">
                            <Template Context="user">
                                @{
                                    var role = $"{user.UserType}";
                                }
                                <text>@role</text>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UsersModel" Context="user" Width="140px">
                            <Template>
                                <RadzenButton Text="View User" Click="@(() => ViewUser(user.Email))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        }
    </RadzenCard>
</RadzenStack>




@code {
    private List<List<UsersModel>> GroupRecommendations = new();
    private List<bool> groupVisibilities;

    protected override async Task OnInitializedAsync()
    {
        var allUsers = await _dbUsers.GetAllUser();
        GroupRecommendations.Add(allUsers.Take(3).ToList());
        GroupRecommendations.Add(allUsers.Skip(3).Take(3).ToList());

        groupVisibilities = new List<bool>(new bool[GroupRecommendations.Count].Select(_ => true).ToArray());
    }

    private void DenyGroup(int groupIndex)
    {
        if (groupIndex < groupVisibilities.Count)
        {
            groupVisibilities[groupIndex] = false;
            StateHasChanged();
        }
    }

    private void ViewUser(string userEmail)
    {
        NavigationManager.NavigateTo($"/Other-User-Details/{userEmail}");
    }
}