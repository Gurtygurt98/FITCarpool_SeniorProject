@page "/rider"
@using DataAccessLibrary.Data.API
@using DataAccessLibrary.Model
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model.Database_Models
@using FITCarpoolWebApp.Components.MainPages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService
@inject HttpClient httpClient
@inject IUsersData _dbUsers
@inject IGroupMemberLocationsData _dbLocation
@inject IGMapsAPI _GmapKey
@inject IJSRuntime JSRuntime
@inject ICarpoolGroupsData _dbGroups

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@attribute [Authorize]
<RadzenStack>

</RadzenStack>
<RadzenStack>
    @if (!carpoolInProgress && GroupList.Any())
    {
        // Display Data Grid to allow user to start trips based on GroupList Retrivied in Intialization Method
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-color-primary">You're trip has not started, please view your groups below (add contact info)</RadzenText>
        <RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@GroupList" TItem="CarpoolGroupsModel" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
            <Template Context="group">
                <RadzenCard Style="width: 100%; padding: 0;">
                    <RadzenStack Gap="1">
                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-primary">Group: @(group.GroupName)</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Destination: @(group.Destination)</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Riders: @(group.ListRiderNames())</RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </Template>
        </RadzenDataList>


    }
    else if (!carpoolInProgress && !GroupList.Any())
    {
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-color-primary">You aren't a rider for any group!</RadzenText>

    }
    else
    {
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
            <RadzenStack>
                <RadzenText Style="font-size: 16px;" Tag="h5" Class="text-primary">
                    Group Name: @CurrentGroup?.GroupName
                </RadzenText>
                <MudText Typo="Typo.h3">Driver Location @@ @DriverLocation.Timestamp:</MudText>
            </RadzenStack>
            <MudCardContent>
                <RadzenGoogleMap @ref="googleMap" ApiKey="@MapApi" Style="width:100%; height:50vh;"
                                 Center="new GoogleMapPosition() { Lat = DriverLocation.Latitude, Lng = DriverLocation.Longitude }" Zoom="12">
                    <Markers>
                        <RadzenGoogleMapMarker Title="@userLocationInfo" Position=@(new GoogleMapPosition() { Lat = @DriverLocation.Latitude, Lng = @DriverLocation.Longitude }) />
                    </Markers>
                </RadzenGoogleMap>
            </MudCardContent>

        </RadzenCard>

    }


</RadzenStack>

@code {
    private string? MapApi = null;
    private bool IsLocationAvailable = false;
    private Location userLocation = new Location();
    private string userLocationInfo = "Your Location";
    private RadzenGoogleMap googleMap;
    bool carpoolInProgress = false;
    List<CarpoolGroupsModel> GroupList = new();
    GroupMemberLocationsModel DriverLocation = new();
    List<GroupMembersModel> GroupMembersList = new();
    CarpoolGroupsModel CurrentGroup = new();
    List<GroupMemberLocationsModel> DriverLocationList = new();
    UsersModel InputModel = new();
    private string userName = "Not found";
    bool allowVirtualization = true;
    private int LocationRefreshRate = 10;
    private System.Threading.Timer? locationRefreshTimer;
    protected override async Task OnInitializedAsync()
    {
        // Get google maps api key for location services later 
        MapApi = _GmapKey.MapAPI;
        // Get user profile information
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
        else
        {
            // Force the user back to the home page if no authentication is present 
            // Program should never arrive here but added to avoid errors
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        List<UsersModel> UserList = await _dbUsers.GetUser(userName);
        if (UserList.Any())
        {
            InputModel = UserList.First();
        }
        else
        {
            // Force the user back to the home page if no authentication is present
            // Program should never arrive here but added to avoid errors
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        // Check if the user is part of trip that has started 
        DriverLocationList = await _dbLocation.GetDriverLocations(InputModel.UserId);
        carpoolInProgress = DriverLocationList.Any();
        if (carpoolInProgress)
        {
            GetDriverLocation();
            // Current driver location object, send this along with updated location to the database for riders to grab
            GroupList = await _dbGroups.GetCarpoolGroup(DriverLocation.GroupId);
            CurrentGroup = GroupList.FirstOrDefault(group => group.GroupId.Equals(DriverLocation.GroupId));
            OnRefreshRateChanged(30);

        }
    }
    private async Task GetDriverLocation()
    {
        DriverLocationList = await _dbLocation.GetDriverLocations(InputModel.UserId);
        DriverLocation = DriverLocationList.First();
        //userLocationInfo = await _GmapKey.GetLocationInfoAsync(DriverLocation.Longitude, DriverLocation.Latitude);
        //Console.WriteLine("Current User info " + userLocationInfo);
        IsLocationAvailable = true;
        InvokeAsync(StateHasChanged); // Ensure UI is updated with new location

    }
    private class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
    private async Task OnRefreshRateChanged(int value)
    {
        LocationRefreshRate = value;
        // Convert refresh rate from seconds to milliseconds
        int period = LocationRefreshRate * 1000;

        if (locationRefreshTimer != null)
        {
            locationRefreshTimer.Change(0, period);
        }
        else
        {
            locationRefreshTimer = new System.Threading.Timer(async _ =>
            {
                await GetDriverLocation();
            }, null, 0, period);
        }
    }
    public void Dispose()
    {
        locationRefreshTimer?.Dispose();
    }
}