@page "/rider"
@using DataAccessLibrary.Data.API
@using Microsoft.AspNetCore.Authorization
@inject IGMapsAPI _GmapKey
@inject IJSRuntime JSRuntime

@attribute [Authorize]
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h3">Driver Location:</MudText>
            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@userLocationInfo</MudText>
        </RadzenStack>
        <MudCardContent>
            <RadzenGoogleMap @ref="googleMap" ApiKey="@MapApi" Style="width:100%; height:50vh;"
                                Center="new GoogleMapPosition() { Lat = userLocation.Latitude, Lng = userLocation.Longitude }" Zoom="12">
                <Markers>
                    <RadzenGoogleMapMarker Title="@userLocationInfo" Position=@(new GoogleMapPosition() { Lat = @userLocation.Latitude, Lng = @userLocation.Longitude }) />
                </Markers>
            </RadzenGoogleMap>
        </MudCardContent>
    </RadzenCard>
</RadzenStack>


@code {
    private string? MapApi = null;
    private bool IsLocationAvailable = false;
    private Location userLocation = new Location();
    private string userLocationInfo = "Your Location";
    private RadzenGoogleMap googleMap;

    protected override async Task OnInitializedAsync()
    {
        MapApi = _GmapKey.MapAPI;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUserLocation();
            StateHasChanged();
        }
    }

    private async Task GetUserLocation()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Allow this site to access your location?"))
        {
            await JSRuntime.InvokeVoidAsync("requestUserLocation", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async void HandleSuccess(double latitude, double longitude)
    {
        userLocation.Latitude = latitude;
        userLocation.Longitude = longitude;
        IsLocationAvailable = true;
        userLocationInfo = await _GmapKey.GetLocationInfoAsync(latitude, longitude);
        InvokeAsync(StateHasChanged); // Ensure UI is updated with new location
    }

    [JSInvokable]
    public void HandleError(string error)
    {
        Console.WriteLine($"Error getting location: {error}");
        // Handle error here
    }

    private class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}