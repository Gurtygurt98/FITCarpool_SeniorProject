@using DataAccessLibrary.Model
@inject Radzen.DialogService DialogService

<RadzenTemplateForm TItem="SchedulesModel" Data="@model" Submit=@OnSubmit>
    <div class="col-md-3">
        <RadzenLabel Text="Is this an arrival or departure time to/from campus" />
    </div>
    <div class="col">
        <RadzenDropDown @bind-Value="@model.Text" Name="ArrivalDepartureSelect" Data="@ArrivalDepartureOptions" Style="width:100%;" />
        <RadzenRequiredValidator Text="Selection is required" Component="ArrivalDepartureSelect" />
    </div>


    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    List<string> ArrivalDepartureOptions = new List<string>() { "arrival", "departure" };

    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }
    [Parameter]
    public int UserID { get; set; }
    [Parameter]
    public EventCallback<SchedulesModel> OnAddSchedule { get; set; }


    SchedulesModel model = new SchedulesModel();

    protected override void OnParametersSet()
    {
        model.Start = Start;
        model.End = End;
        model.UserId = UserID;
    }

    void OnSubmit()
    {
        model.Day = model.Start.ToString();
        OnAddSchedule.InvokeAsync(model);
        DialogService.Close(model);
        
    }

}