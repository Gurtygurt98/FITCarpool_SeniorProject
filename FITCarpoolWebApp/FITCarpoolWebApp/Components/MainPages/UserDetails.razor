@inject NavigationManager NavigationManager
@inject IUsersData _dbUsers
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@using FITCarpoolWebApp.Components.MainPages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService

@using Radzen.Blazor
@page "/User-Details"


<div class="col-auto p-2 justify-content-end bd-highlight">
    <RadzenSelectBar class="bg-white rounded-pill my-auto" TValue="int" Size="ButtonSize.Small" @bind-Value="@view">
        <Items>
            <RadzenSelectBarItem Value="1" Text="Self-View  " />
            <RadzenSelectBarItem Value="2" Text="User-View " />
        </Items>
    </RadzenSelectBar>
    
</div>

@if(view == 1)
{
    <div class="col-auto p-2 justify-content-end bd-highlight">
    <div style="display: flex; align-items: center; justify-content: space-between;">

        <RadzenButton Text="Update Profile" Click="@(() => NavigateTo("Profile"))" />
    </div>
    </div>

}


<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenRow RowGap="0">
            <RadzenColumn SizeSM="3" Class="d-flex align-items-center justify-content-center">
                <RadzenButton Click="@(() => NavigateTo("Profile"))" ButtonStyle="ButtonStyle.Light" Style="width: 150px; height: 150px; border-radius: 50%;">

                @if (InputModel.ProfilePicture == null)
                    {
                        <RadzenImage Path="https://cdn.create.vista.com/api/media/medium/137014128/stock-vector-user-profile-icon?token" Style="width:100%" />
                    }

                @if (InputModel.ProfilePicture != null)
                    {
                        <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(InputModel.ProfilePicture)}")" AlternateText="binary image" Style="width:100%" />
                    }
                    

                </RadzenButton>
            </RadzenColumn>
            <RadzenColumn SizeSM="6" Class="d-flex align-items-center justify-content-center">
                <RadzenButton Text="13" class="p-1 rz-background-color-primary rz-color-on-primary rz-text-align-center rz-p-2" Style="height: 80px; width:80px;display: flex; align-items: center; justify-content: center; font-size: 32px; margin: 10px;" Click="@(() => NavigateTo("Friends"))" />
                <RadzenText TextStyle="TextStyle.Button" class="rz-display-flex rz-mt-2 rz-my-0">Friends</RadzenText>
                <RadzenButton Text="24" class="p-1 rz-background-color-primary rz-color-on-primary rz-text-align-center rz-p-2" Style="height: 80px; width:80px;display: flex; align-items: center; justify-content: center; font-size: 32px; margin: 10px;" Click="@(() => NavigateTo("Group"))" />
                <RadzenText TextStyle="TextStyle.Button" class="rz-display-flex rz-mt-2 rz-my-0">Completed Rides</RadzenText>
            </RadzenColumn>
        </RadzenRow>

        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-mt-2 rz-my-0">Name</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle1" Placeholder="User's Name'..." class="rz-display-flex rz-mt-2 rz-my-0">
            @userFullName
        </RadzenText>


        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-mt-2 rz-my-0">Pronouns</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">She/Her, He/Him, etc.</RadzenText>

        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-mt-2 rz-my-0">Bio</RadzenText>
        <RadzenTextArea class="w-60" aria-label="TextArea" />

        


        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-mt-2 rz-my-2">Reviews </RadzenText>
  
        <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">J... L...: Very pleasant ride!!</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">R... P...: Sweet person. Nice conversation.</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">B... O...: Dirty Car</RadzenText>
        

        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-mt-2 rz-my-2">Current Rating </RadzenText>
        <RadzenRating @bind-Value=@ratingValue ReadOnly=true />

        @if (view == 1)
        {
            <RadzenStack>
                <MudText Typo="Typo.h6" Align="Align.Center">Rider/Driver Statistics</MudText>
            </RadzenStack>
            <MudDataGrid Items="stats" Bordered="true" T="Statistics">
                <Columns>
                    <PropertyColumn Property="x => x.title" Title="Description" />
                    <PropertyColumn Property="x => x.miles" Title="Miles" />
                </Columns>
            </MudDataGrid>
        }
       

       

    </RadzenCard>
</RadzenStack>


@code {

    bool show;

    public int view { get; private set; }



    private void NavigateTo(string page)
    {
        NavigationManager.NavigateTo($"/{page}");
    }


    private List<Statistics> stats;

    protected override void OnInitialized()
    {
        stats = new List<Statistics>
        {
            new Statistics { title = "Total Driving Miles", miles = 3},
            new Statistics { title = "Total Riding Miles", miles = 8},
            new Statistics { title = "Net Driving Miles", miles = 15},
            new Statistics { title = "Net Driving Miles Per Week", miles = 6}

        };
    }

    public class Statistics
    {
        public string? title { get; set; }
        public int miles { get; set; }
        public int CurrentSize { get; set; }
        public string? Description { get; set; }
    }


    // Code for displaying other users' profile

    private UsersModel selectedUser;
    private string userFullName => InputModel?.FirstName + " " + InputModel?.LastName ?? "No user selected";
    //private List<UsersModel> UserList = new();
    UsersModel InputModel = new();
    private List<UsersModel> UserList = null;
    private string userName = "Not found";

    private int noValue;
    public int ratingValue
    {
        get => InputModel?.Rating ?? noValue;
        set
        {
            if (InputModel != null)
            {
                InputModel.Rating = ratingValue;
            }
            noValue = ratingValue;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //UserList = await _dbUsers.GetAllUser();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
        else
        {
            userName = "Not found";
        }
        UserList = await _dbUsers.GetUser(userName);
        if (UserList.Any())
        {
            InputModel = UserList.First();
        }
    }

    private async Task<IEnumerable<UsersModel>> SearchUser(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<UsersModel>();

        return UserList.Where(user =>
            $"{user.Email}".Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .ToList();
    }

}