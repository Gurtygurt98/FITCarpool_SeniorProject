@page "/After-Trip"
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@inject NotificationService NotificationService
@inject Radzen.DialogService DialogService
@inject IUsersData _dbUsers
@inject IReportsData _dbReports

@attribute [Authorize]

<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%;">
        <RadzenHeading Size="H2" Text="Review Your Trip" Style="text-align: center; margin-bottom: 20px;" />

        @foreach (var group in GroupRecommendations.Keys)
        {
            if (GroupRecommendations[group])
            {
                
                <RadzenDataGrid Data="@RecommendationData[group]" TItem="UsersModel" AllowSorting="true">
                    <Columns>

                        <RadzenDataGridColumn TItem="UsersModel" Width="90px">
                            <Template Context="user">
                                @if (user.ProfilePicture != null)
                                {
                                    <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(user.ProfilePicture)}")" alt="Profile Picture" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                                else
                                {
                                    <img src="https://cdn.create.vista.com/api/media/medium/137014128/stock-vector-user-profile-icon?token" alt="Default Profile" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Title="Name" Width="140px">
                            <Template Context="user">
                                @{
                                    var fullName = $"{user.FirstName} {user.LastName}";
                                }
                                <text>@fullName</text>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Context="user" Width="165px">
                            <Template>
                                <RadzenButton Text="View User" Click="@(() => ViewUser(user.Email))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Title="Rating" Width="140px">
                            <Template Context="user">
                                <RadzenRating @bind-Value="@user.Rating" Max="5" Change="@(args => StoreRating(args, user))" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UsersModel" Title="Review" Width="300px">
                            <Template Context="user">
                                <div style="display: inline-flex;">
                                    <RadzenButton Text="Leave Review" Click="@(() => LeaveReview(user))" Style="color: white;" />
                                </div>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Context="user" Width="100px">
                            <Template>
                            <RadzenButton Text="Report" Click="@(() => ReportUser(user))" Style="width: 100%; background-color: tomato; color: white;" />
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            }
        }

        <div style="text-align: center; margin-top: 20px;">
            <RadzenButton Text="Submit Ratings" Click="@SubmitRatings" Style="background-color: green; color: white;" />
        </div>

    </RadzenCard>
</RadzenStack>



@code {
    private Dictionary<int, bool> GroupRecommendations = new();
    private Dictionary<int, List<UsersModel>> RecommendationData = new();

    protected override async Task OnInitializedAsync()
    {
        var allUsers = await _dbUsers.GetAllUser();
        RecommendationData.Add(0, allUsers.Skip(3).Take(3).ToList());

        foreach (var key in RecommendationData.Keys)
        {
            GroupRecommendations[key] = true;
        }
    }


    bool _busyUpdate = false;
    UsersModel InputModel = new();
    async Task UpdateRatings(int rating, UsersModel user)
    {       
        _busyUpdate = true;

        try
        {
            await _dbUsers.UpdateUser(user);
        }

        finally
        {
            NavigationManager.NavigateTo("/After-Trip", forceLoad: true);
        }

    }

    private Dictionary<int, int> Ratings = new();
    private void StoreRating(int rating, UsersModel user)
    {
        if (Ratings.ContainsKey(user.UserId))
        {
            Ratings[user.UserId] = rating;
        }
        else
        {
            Ratings.Add(user.UserId, rating);
        }
    }
    private async Task SubmitRatings()
    {
        foreach (var rating in Ratings)
        {
            var user = RecommendationData[0].FirstOrDefault(u => u.UserId == rating.Key);
            if (user != null)
            {
                user.Rating = rating.Value;
                await _dbUsers.UpdateUser(user); 
            }
        }
        NavigationManager.NavigateTo("/After-Trip", forceLoad: true);

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Ratings Submitted"});

    }

    private void ViewUser(string userEmail)
    {
        NavigationManager.NavigateTo($"/Other-User-Details/{userEmail}");
    }


    private string reportContent;
    private string reportReason;
    private string reportedUserEmail;
    private string reportedUserName;
    private string reportedUserNameLast;

    private async Task ReportUser(UsersModel user)
    {
        reportedUserEmail = user.Email;
        reportedUserName = user.FirstName;
        reportedUserNameLast = user.LastName;

        await DialogService.OpenAsync($"Report User: {reportedUserName} {reportedUserNameLast}",
    ds => @<div style="margin-bottom: 20px;">
        <textarea @bind="reportContent" placeholder="Write your report here..." style="width: 100%; height: 150px;"></textarea>
        <RadzenDropDown @bind-Value="reportReason" Data="@(new List<string> { "Inappropriate Behavior", "Harassment", "Violation of Terms", "Other" })" Placeholder="Select a reason" />
        <RadzenButton Text="Submit" Click="@SubmitReport" Style="width: 100%; background-color: #D3D3D3; color: #333; margin-top: 20px;" />
    </div>,
    new Radzen.DialogOptions() { Width = "600px", Height = "400px" });
    }

    private async Task SubmitReport()
    {
        if (string.IsNullOrEmpty(reportContent) || string.IsNullOrEmpty(reportReason))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Submission Failed", Detail = "Please provide both a report and a reason." });
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        var currentUserEmail = currentUser.Identity.Name;

        var reportedUser = (await _dbUsers.GetAllUser()).FirstOrDefault(u => u.Email == reportedUserEmail);
        var submittingUser = (await _dbUsers.GetAllUser()).FirstOrDefault(u => u.Email == currentUserEmail);

        if (reportedUser != null && submittingUser != null)
        {
            var newReport = new ReportsModel
                    {
                        ReportedUserID = reportedUser.UserId,
                        SubmittedUserID = submittingUser.UserId,
                        ReportText = reportContent,
                        ReportReason = reportReason
                    };

            await _dbReports.CreateNewReport(newReport);

            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Report Submitted", Detail = "Your report has been submitted successfully." });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Could not find the reported or submitting user." });
        }

        reportContent = string.Empty;
        DialogService.Close(true);
    }

    private string reviewContent; 
    private string reviewedUserEmail; 
    private string reviewedUserName;
    private string reviewedUserNameLast;

    private async Task LeaveReview(UsersModel user)
    {
        reviewedUserEmail = user.Email; 
        reviewedUserName = user.FirstName;
        reviewedUserNameLast = user.LastName;

        await DialogService.OpenAsync($"Leave a Review for {reviewedUserName} {reviewedUserNameLast}",
    ds => @<div style="margin-bottom: 20px;">
        <textarea @bind="reviewContent" placeholder="Write your review here..." style="width: 100%; height: 150px;"></textarea>
        <RadzenButton Text="Submit" Click="@SubmitReview" Style="width: 100%; background-color: #D3D3D3; color: #333; margin-top: 20px;" />
    </div>,
        new Radzen.DialogOptions() { Width = "600px", Height = "400px" });
    }

    private async Task SubmitReview()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Review Submitted", Detail = "Your review has been submitted successfully." });

        reviewContent = string.Empty;
        DialogService.Close(true);
    }

    
}
}
