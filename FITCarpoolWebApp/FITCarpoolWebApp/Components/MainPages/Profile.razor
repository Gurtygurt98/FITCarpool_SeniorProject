@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@using FITCarpoolWebApp.Components.MainPages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService

@page "/Profile"
<h3>Update User Profile</h3>
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Basic Info</MudText>
            <RadzenTextBox Placeholder="First Name" Style="width:100%; margin-bottom:15px;" />
            <RadzenTextBox Placeholder="Last Name" Style="width:100%; margin-bottom:15px;" />
            <RadzenTextBox Placeholder="Phone Number" Style="width:100%; margin-bottom:15px;" />

            <RadzenLabel Text="Select Gender" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown @bind-Value=@gender Data=@genderData Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
            
            <RadzenLabel Text="Select Role" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown @bind-Value=@role Data=@roles Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
            <MudText Typo="Typo.h2" Align="Align.Left">Location Info</MudText>
            <RadzenTextBox @bind-Value="@address" Placeholder="Address" Style="width: 100%; max-width: 400px;" />
            <RadzenTextBox @bind-Value="@pickupLocation" Placeholder="Pick-up Location" Style="width: 100%; max-width: 400px;" />
            <RadzenTextBox @bind-Value="@dropoffLocation" Placeholder="Drop-off Location" Style="width: 100%; max-width: 400px;" />
            @if (role == "Driver")
            {
                <RadzenTextBox @bind-Value="@drivingDistance" Placeholder="Driving Distance (in miles)" Style="width: 100%; max-width: 400px;" />
            }
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Profile Picture Upload</RadzenText>
                <RadzenUpload @ref="upload" Auto="false" Url="upload/multiple" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                              class="w-100" Accept="image/*" />
            </RadzenCard>
        </RadzenStack>
    </RadzenCard>
    @if (role == "Driver")
    {
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
            <RadzenStack>
                <MudText Typo="Typo.h2" Align="Align.Center">Vehicle Info</MudText>
                <RadzenTextBox @bind-Value="@seatbelts" Placeholder="Number of Functional Seatbelts" Style="width: 100%; max-width: 400px;" />
                <RadzenTextBox @bind-Value="@vehicleModel" Placeholder="Manufacturer and Model" Style="width: 100%; max-width: 400px;" />
                <RadzenTextBox @bind-Value="@vehicleColor" Placeholder="Vehicle Color" Style="width: 100%; max-width: 400px;" />
                <RadzenTextBox @bind-Value="@licensePlate" Placeholder="License Plate Number" Style="width: 100%; max-width: 400px;" />
                <RadzenLabel Text="Allow Eating & Drinking" Component="RadzenCheckBox" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenCheckBox @bind-Value="@allowEatingDrink" Text="Allow eat/drink in the car" Style="margin-top: 10px;" />
                <RadzenLabel Text="Allow Smoking " Component="RadzenCheckBox" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenCheckBox @bind-Value="@allowSmoking" Text="Allow smoking in the car" Style="margin-top: 10px;" />
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Car & License Plate Picture Upload</RadzenText>
                    <RadzenUpload @ref="upload" Auto="true" Url="upload/multiple" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                                  class="w-100" Accept="image/*" />
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    }
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Edit Schedule</MudText>
        </RadzenStack>
        <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="SchedulesModel" Data=@appointments StartProperty="Start" EndProperty="End"
                         TextProperty="Text" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender star>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </RadzenCard>

</RadzenStack>

@code {
    // Logic added for creating user preferences - schedule 
    RadzenScheduler<SchedulesModel> scheduler;
    RadzenUpload upload;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    // Gender 
    string gender = "Other";
    string role = "Rider";
    string seatbelts;
    string vehicleModel;
    string vehicleColor;
    string licensePlate;
    string address;
    string pickupLocation;
    string dropoffLocation;
    string drivingDistance;
    bool allowEatingDrink;
    bool allowSmoking;
    IEnumerable<string> genderData = new string[] { "Male", "Female", "Non-binary", "Genderqueer", "Agender", "Bigender", "Genderfluid", "Two-Spirit", "Other" };
    IEnumerable<string> roles = new string[] { "Rider" , "Driver"};

    IList<SchedulesModel> appointments = new List<SchedulesModel>
    {
           // 3 days before
        new SchedulesModel { Start = DateTime.Today.AddDays(-3).AddHours(8), End = DateTime.Today.AddDays(-3).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-3).AddHours(17), End = DateTime.Today.AddDays(-3).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 2 days before
        new SchedulesModel { Start = DateTime.Today.AddDays(-2).AddHours(8), End = DateTime.Today.AddDays(-2).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-2).AddHours(17), End = DateTime.Today.AddDays(-2).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 1 day before
        new SchedulesModel { Start = DateTime.Today.AddDays(-1).AddHours(8), End = DateTime.Today.AddDays(-1).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-1).AddHours(17), End = DateTime.Today.AddDays(-1).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // Today
        new SchedulesModel { Start = DateTime.Today.AddHours(8), End = DateTime.Today.AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddHours(17), End = DateTime.Today.AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 1 day after
        new SchedulesModel { Start = DateTime.Today.AddDays(1).AddHours(8), End = DateTime.Today.AddDays(1).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(1).AddHours(17), End = DateTime.Today.AddDays(1).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 2 days after
        new SchedulesModel { Start = DateTime.Today.AddDays(2).AddHours(8), End = DateTime.Today.AddDays(2).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(2).AddHours(17), End = DateTime.Today.AddDays(2).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 3 days after
        new SchedulesModel { Start = DateTime.Today.AddDays(3).AddHours(8), End = DateTime.Today.AddDays(3).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(3).AddHours(17), End = DateTime.Today.AddDays(3).AddHours(17).AddMinutes(30), Text = "Leave Campus" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"Slot Selected: {args.Start} to {args.End}");

        if (args.View.Text != "Year")
        {
            SchedulesModel data = await DialogService.OpenAsync<AddSchedulePage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<SchedulesModel> args)
    {
        Console.WriteLine($"Appt Selected: {args.Start} to {args.End}");

        var copy = new SchedulesModel
            {
                Start = args.Data.Start,
                End = args.Data.End,
                Text = args.Data.Text
            };

        var data = await DialogService.OpenAsync<EditSchedulePage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<SchedulesModel> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}
