@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@using FITCarpoolWebApp.Components.MainPages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService
@inject HttpClient httpClient
@inject IUsersData _dbUsers
@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/Profile"
<h3>Update User Profile</h3>
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        @if (InputModel != null)
        {
            <RadzenStack>
                <MudText Typo="Typo.h2" Align="Align.Center">Basic Info</MudText>
                <RadzenTextBox @bind-Value="@InputModel.FirstName" Placeholder="First Name" Style="width:100%; margin-bottom:15px;" />
                <RadzenTextBox @bind-Value="@InputModel.LastName" Placeholder="Last Name" Style="width:100%; margin-bottom:15px;" />
                <RadzenTextBox @bind-Value="@InputModel.Phone" Placeholder="Phone Number" Style="width:100%; margin-bottom:5px;" />
                <RadzenLabel  Text="Phone Number Privacy Setting" Component="DropDownMultiple" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value="@InputModel.PhonePrivacy" Data="@privacyOptions" Placeholder="Select Privacy Setting"
                                Style="width: 100%; max-width: 400px;" TextProperty="Name" ValueProperty="Id" Name="DropDownMultiple" />


                <RadzenLabel Text="Select Gender" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle; margin-top:15px" />
                <RadzenDropDown @bind-Value=@InputModel.Gender Data=@genderData Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />

                <RadzenLabel Text="Select Role" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@InputModel.UserType Data=@rolesData Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />

                <MudText Typo="Typo.h2" Align="Align.Left">Location Info</MudText>
                <RadzenTextBox @bind-Value="@InputModel.UserLocation" Placeholder="Address" Style="width: 100%; max-width: 400px;" />
                <RadzenTextBox @bind-Value="@InputModel.PickupLocation" Placeholder="Pick-up Location" Style="width: 100%; max-width: 400px;" />
                <RadzenTextBox @bind-Value="@InputModel.DropoffLocation" Change="@ChangeToType" Placeholder="Drop-off Location" Style="width: 100%; max-width: 400px;" />
                @if (InputModel.UserType.Equals("driver"))
                {
                    <RadzenNumeric @bind-Value="@InputModel.DrivingDistance" Placeholder="Driving Distance (in miles)" Style="width: 100%; max-width: 400px;" Min="0" Step="1" />
                }
                @*Address Privacy Settings*@
                <RadzenLabel Text="Address Privacy Setting" Component="DropDownMultiple" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value="@InputModel.AddressPrivacy" Data="@privacyOptions" Placeholder="Select Privacy Setting"
                                Style="width: 100%; max-width: 400px;" TextProperty="Name" ValueProperty="Id" Name="DropDownMultiple" />
                @*Upload File*@
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Profile Picture Upload</RadzenText>
                    <RadzenUpload @ref="upload" Auto="false" Multiple="false" Url="@(uploadUrlProfile)"
                                  InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" class="w-100" Accept="image/*" />
                        @*Need to make this part of the actual upload on the bottom of the page to update the entire thing*@
                    <RadzenButton Text="Upload" Click=@(args => upload.Upload()) class="d-block mt-4" />
                </RadzenCard>
                @*Current Profile Picture File*@
                @if(InputModel.ProfilePicture != null)
                {
                    <RadzenStack AlignItems="Radzen.AlignItems.Center" Class="rz-mx-auto rz-my-12">
                        <RadzenText Text="Current Profile Picture" Style="margin-bottom: 10px;" />
                        <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(InputModel.ProfilePicture)}")" AlternateText="binary image" Style="max-width:200px; max-height:200px;" />
                    </RadzenStack>
                }
 
            </RadzenStack>

            @*Driver Only Section*@
            @if (InputModel.UserType.Equals("driver"))
            {
                <RadzenStack>
                    <MudText Typo="Typo.h2" Align="Align.Center">Vehicle Info</MudText>
                    <RadzenNumeric @bind-Value="@InputModel.BeltCount" Placeholder="Number of Functional Seatbelts" Style="width: 100%; max-width: 400px;" />
                    <RadzenTextBox @bind-Value="@InputModel.MakeModel" Placeholder="Manufacturer and Model" Style="width: 100%; max-width: 400px;" />
                    <RadzenTextBox @bind-Value="@InputModel.VehicleColor" Placeholder="Vehicle Color" Style="width: 100%; max-width: 400px;" />
                    <RadzenTextBox @bind-Value="@InputModel.LicensePlate" Placeholder="License Plate Number" Style="width: 100%; max-width: 400px;" />
                    @*Need to add logic to submit area to handle the bool inputs from the check boxes below *@
                    <RadzenLabel Text="Allow Eating & Drinking" Component="RadzenCheckBox" Style="margin-right: 8px; vertical-align: middle;" />
                    <RadzenCheckBox @bind-Value="@allowEatingDrink" Text="Allow eat/drink in the car" Style="margin-top: 10px;" />
                    <RadzenLabel Text="Allow Smoking " Component="RadzenCheckBox" Style="margin-right: 8px; vertical-align: middle;" />
                    <RadzenCheckBox @bind-Value="@allowSmoking" Text="Allow smoking in the car" Style="margin-top: 10px;" />
                    @*License Plate Image upload *@
                    @*Upload File*@
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">License Picture Upload</RadzenText>
                        <RadzenUpload @ref="upload" Auto="false" Multiple="false" Url="@(uploadUrlLicense)"
                                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" class="w-100" Accept="image/*" />
                        @*Need to make this part of the actual upload on the bottom of the page to update the entire thing*@
                        <RadzenButton Text="Upload" Click=@(args => upload.Upload()) class="d-block mt-4" />
                    </RadzenCard>
                    @*Current License file Picture File*@
                    @if (InputModel.LicensePlatePicture != null)
                    {
                        <RadzenStack AlignItems="Radzen.AlignItems.Center" Class="rz-mx-auto rz-my-12">
                            <RadzenText Text="Current License Picture" Style="margin-bottom: 10px;" />
                            <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(InputModel.LicensePlatePicture)}")" AlternateText="binary image" Style="max-width:200px; max-height:200px;" />
                        </RadzenStack>
                    }
 
                </RadzenStack>
            }
            @*Schedule Section*@
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
                <RadzenStack>
                    <MudText Typo="Typo.h2" Align="Align.Center">Edit Schedule</MudText>
                </RadzenStack>
                <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="SchedulesModel" Data=@appointments StartProperty="Start" EndProperty="End"
                                 TextProperty="Text" SelectedIndex="2"
                                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender star>
                    <RadzenDayView />
                    <RadzenWeekView />
                    <RadzenMonthView />
                </RadzenScheduler>
            </RadzenCard>
        }else
        {
            @*Error Section*@
            <MudText Typo="Typo.h6">Your account was created before full integration, please delete your account under user management and create a new account</MudText>
        }

    </RadzenCard>



</RadzenStack>

@code {
    private List<UsersModel> UserList = null;
    private string uploadUrlLicense;
    private string uploadUrlProfile;

    UsersModel InputModel = new();
    // Logic added for creating user preferences - schedule
    RadzenScheduler<SchedulesModel> scheduler = new();
    RadzenUpload upload;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    List<string> selectedPrivacy = new List<string> { "1" };
    IEnumerable<PrivacyOption> privacyOptions = new List<PrivacyOption>
    {
        new PrivacyOption { Id = "1", Name = "Share With No One" },
        new PrivacyOption { Id = "2", Name = "Share with Friends" },
        new PrivacyOption { Id = "3", Name = "Share with Group Driver" },
        new PrivacyOption { Id = "4", Name = "Share with Other Group Passengers" },
    };

    class PrivacyOption
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
    // Gender
    string gender = "Other";
    private string userName = "Not found";
    string file;
    string fileName;
    long? fileSize;
    string role = "rider";
    string seatbelts;
    string vehicleModel;
    string vehicleColor;
    string licensePlate;
    string address;
    string pickupLocation;
    string dropoffLocation;
    string drivingDistance;
    bool allowEatingDrink;
    bool allowSmoking;
    int progress;
    string info;
    IEnumerable<string> genderData = new string[] { "Male", "Female", "Non-binary", "Genderqueer", "Agender", "Bigender", "Genderfluid", "Two-Spirit", "Other" };
    IEnumerable<string> rolesData = new string[] { "rider", "driver" };
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
        else
        {
            userName = "Not found";
        }
        UserList = await _dbUsers.GetUser(userName);
        if (UserList.Any())
        {
            InputModel = UserList.First();

            PrepareUploadUrl();
        }
    }

    private void PrepareUploadUrl()
    {
        var userId = InputModel.UserId; // Assuming InputModel.ID holds the user ID you intend to use
        uploadUrlProfile = $"/FileUpload/upload/{InputModel.UserId}";
        uploadUrlLicense = $"/FileUpload/upload/license/{InputModel.UserId}";

    }
    IList<SchedulesModel> appointments = new List<SchedulesModel>
    {
           // 3 days before
        new SchedulesModel { Start = DateTime.Today.AddDays(-3).AddHours(8), End = DateTime.Today.AddDays(-3).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-3).AddHours(17), End = DateTime.Today.AddDays(-3).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 2 days before
        new SchedulesModel { Start = DateTime.Today.AddDays(-2).AddHours(8), End = DateTime.Today.AddDays(-2).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-2).AddHours(17), End = DateTime.Today.AddDays(-2).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 1 day before
        new SchedulesModel { Start = DateTime.Today.AddDays(-1).AddHours(8), End = DateTime.Today.AddDays(-1).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(-1).AddHours(17), End = DateTime.Today.AddDays(-1).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // Today
        new SchedulesModel { Start = DateTime.Today.AddHours(8), End = DateTime.Today.AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddHours(17), End = DateTime.Today.AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 1 day after
        new SchedulesModel { Start = DateTime.Today.AddDays(1).AddHours(8), End = DateTime.Today.AddDays(1).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(1).AddHours(17), End = DateTime.Today.AddDays(1).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 2 days after
        new SchedulesModel { Start = DateTime.Today.AddDays(2).AddHours(8), End = DateTime.Today.AddDays(2).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(2).AddHours(17), End = DateTime.Today.AddDays(2).AddHours(17).AddMinutes(30), Text = "Leave Campus" },

        // 3 days after
        new SchedulesModel { Start = DateTime.Today.AddDays(3).AddHours(8), End = DateTime.Today.AddDays(3).AddHours(8).AddMinutes(30), Text = "Arrive on Campus" },
        new SchedulesModel { Start = DateTime.Today.AddDays(3).AddHours(17), End = DateTime.Today.AddDays(3).AddHours(17).AddMinutes(30), Text = "Leave Campus" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"Slot Selected: {args.Start} to {args.End}");

        if (args.View.Text != "Year")
        {
            SchedulesModel data = await DialogService.OpenAsync<AddSchedulePage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<SchedulesModel> args)
    {
        Console.WriteLine($"Appt Selected: {args.Start} to {args.End}");

        var copy = new SchedulesModel
            {
                Start = args.Data.Start,
                End = args.Data.End,
                Text = args.Data.Text
            };

        var data = await DialogService.OpenAsync<EditSchedulePage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<SchedulesModel> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"% '{name}' / {args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;
    }
    void ChangeToType()
    {
        Console.WriteLine(InputModel.UserType);
        StateHasChanged();
    }
}   