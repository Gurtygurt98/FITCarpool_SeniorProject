@page "/Friends"
@using MudBlazor
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IRolesData _dbRoles
@inject IDialogService DialogService

@attribute [Authorize]


<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Friends List</MudText>
            <MudAutocomplete T="string" @bind-Value="_searchString"
                             SearchFunc="@SearchUser"
                             Placeholder="Search for other users..."
                             Dense="true"
                             ResetValueOnEmptyText="true"
                             ToStringFunc="@((string s) => s)" />
        </RadzenStack>


        @foreach (var row in friends)
        {
            <RadzenRow>
                <RadzenColumn>
                    @row.Name
                </RadzenColumn>
                <RadzenColumn>
                    @row.Status
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => OnClick("Invite Sent")) Text="Invite to Group" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => RemoveFriend(row, "Friend Removed")) Text="Remove Friend" ButtonStyle="ButtonStyle.Danger" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Incoming Friend Requests</MudText>
        </RadzenStack>
        @foreach (var row in requests)
        {
            <RadzenRow>
                <RadzenColumn>
                    @row.Name
                </RadzenColumn>
                <RadzenColumn>
                    @row.Status
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => AcceptFriendRequest(row)) Text="Accept" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => DeclineFriendRequest(row)) Text="Decline" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>

@code {

    private void OnClick(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = message});
    }
    private void OnClick2(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }

    private void RemoveFriend(Friend f, string message)
    {
        friends.Remove(f);
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }
    private void AcceptFriendRequest(Friend f)
    {
        friends.Add(f);
        requests.Remove(f);
    }
    private void DeclineFriendRequest(Friend f)
    {
        requests.Remove(f);
    }

    private List<Friend> friends;
    private List<Friend> requests;

    protected override void OnInitialized()
    {
        friends = new List<Friend>
        {
            new Friend { Name = "Friend 1", Status = "Recently Online"},
            new Friend { Name = "Friend 2", Status = "Recently Online"},
            new Friend { Name = "Friend 3", Status = "Offline"},
            new Friend { Name = "Friend 4", Status = "Recently Online"},
            new Friend { Name = "Friend 5", Status = "Offline"}
        };
        requests = new List<Friend>
        {
            new Friend { Name = "Friend 6", Status = "Recently Online"},
            new Friend { Name = "Friend 7", Status = "Recently Online"},
            new Friend { Name = "Friend 8", Status = "Offline"},
        };
    }

    public class Friend
    {
        public string? Name { get; set; }
        public string? Status { get; set; }
    }

    private string _searchString = "";
    private List<AccountModel> AccountList = new();

    protected override async Task OnInitializedAsync()
    {
        AccountList = await _dbRoles.GetAccounts(); // Load users
    }

    private async Task<IEnumerable<string>> SearchUser(string value)
    {
        // Simulate an asynchronous search, e.g., if fetching from an API or database
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<string>();

        return AccountList
            .Where(a => a.UserName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(a => a.UserName)
            .ToList();
    }
}
