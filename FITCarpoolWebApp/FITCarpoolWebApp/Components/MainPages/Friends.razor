@page "/Friends"
@using MudBlazor
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IRolesData _dbRoles
@inject IDialogService DialogService
@inject IUsersData _dbUsers


@attribute [Authorize]


<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack style="margin-bottom: 50px;">
            <MudText Typo="Typo.h2" Align="Align.Center">Friends List</MudText>
            <MudAutocomplete T="string" @bind-Value="_searchString"
                             SearchFunc="@SearchUser"
                             Placeholder="Search for other users..."
                             Dense="true"
                             ResetValueOnEmptyText="true"
                             ToStringFunc="@((string s) => s)" />
        </RadzenStack>


        @foreach (var group in GroupRecommendations.Keys)
        {
            if (GroupRecommendations[group])
            {
                <RadzenDataGrid Data="@RecommendationData[group]" TItem="UsersModel" AllowSorting="true">
                    <Columns>

                        <RadzenDataGridColumn TItem="UsersModel" Width="80px">
                            <Template Context="user">
                                @if (user.ProfilePicture != null)
                                {
                                    <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(user.ProfilePicture)}")" alt="Profile Picture" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                                else
                                {
                                    <img src="https://cdn.create.vista.com/api/media/medium/137014128/stock-vector-user-profile-icon?token" alt="Default Profile" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UsersModel" Title="Name" Width="200px">
                            <Template Context="user">
                                @{
                                    var fullName = $"{user.FirstName} {user.LastName}";
                                }
                                <text>@fullName</text>
                            </Template>
                        </RadzenDataGridColumn>
                        
                        <RadzenDataGridColumn TItem="UsersModel" Context="user" Width="140px">
                            <Template>
                                <RadzenButton Text="View User" Click="@(() => ViewUser(user.Email))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        }
    </RadzenCard>
</RadzenStack>
@*<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Incoming Friend Requests</MudText>
        </RadzenStack>
        @foreach (var row in requests)
        {
            <RadzenRow>
                <RadzenColumn>
                    @row.Name
                </RadzenColumn>
                <RadzenColumn>
                    @row.Status
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => AcceptFriendRequest(row)) Text="Accept" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => DeclineFriendRequest(row)) Text="Decline" ButtonStyle="ButtonStyle.Danger" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>
*@
@code {

    private void OnClick(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = message});
    }
    private void OnClick2(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }

    /*private void RemoveFriend(Friend f, string message)
    {
        friends.Remove(f);
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }
    private void AcceptFriendRequest(Friend f)
    {
        friends.Add(f);
        requests.Remove(f);
    }
    private void DeclineFriendRequest(Friend f)
    {
        requests.Remove(f);
    }*/

    private Dictionary<int, bool> GroupRecommendations = new();
    private Dictionary<int, List<UsersModel>> RecommendationData = new();

    public class Friend
    {
        public string? Name { get; set; }
        public string? Status { get; set; }
    }


    // Code for searching other users
    private string _searchString = "";
    private List<AccountModel> AccountList = new();

    private void ViewUser(string userEmail)
    {
        NavigationManager.NavigateTo($"/Other-User-Details/{userEmail}");
    }

    protected override async Task OnInitializedAsync()
    {
        AccountList = await _dbRoles.GetAccounts();

        var allUsers = await _dbUsers.GetAllUser();
        RecommendationData.Add(0, allUsers.Take(3).ToList());
        RecommendationData.Add(1, allUsers.Skip(3).Take(3).ToList());

        foreach (var key in RecommendationData.Keys)
        {
            GroupRecommendations[key] = true;
        }
    }

    private async Task<IEnumerable<string>> SearchUser(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<string>();

        return AccountList
            .Where(a => a.UserName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(a => a.UserName)
            .ToList();
    }
}
