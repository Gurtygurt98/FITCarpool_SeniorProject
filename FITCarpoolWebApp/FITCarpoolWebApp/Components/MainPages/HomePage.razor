@page "/"
@using FITCarpoolWebApp.Components.Account.Shared
@using MudBlazor
@using Radzen.Blazor
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUsersData _dbUsers
@inject IFriendsData _dbFriends
@inject IGroupScheduleData _dbGroupSchedule

<AuthorizeView>
    @* User is logged in *@
    <Authorized>
        <MudText Typo="Typo.h2">Welcome, @userName!</MudText>

        @* Schedule Card on top *@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 100%; overflow-x: auto;">
            <MudText Typo="Typo.h3" Align="Align.Start"><b>Upcoming Rides</b></MudText>
            <div style="display: flex; flex-direction: row; gap: 20px;">
                @if (upcomingTrips != null && upcomingTrips.Count > 0)
                {
                    @foreach (var trip in upcomingTrips)
                    {
                        <RadzenCard Class="rz-my-12" Style="min-width: 300px; width: auto;">
                            <MudText Typo="Typo.h4" Align="Align.Center">Day: @trip.Day</MudText>
                            <MudText Typo="Typo.h5" Align="Align.Center">Date: @trip.Start.ToString("MMMM dd, yyyy") at @trip.Start.ToString("hh:mm tt")</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">
                                Direction: @(trip.Direction == "arrival" ? "Arriving to Campus" : "Departing from Campus")
                            </MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">Role: @userRole</MudText>

                            <MudIconButton Icon="launch" Align="Align.Center" Href="/Rider-Confirmation" Color="Color.Primary" />
                            <RadzenText TextStyle="TextStyle.Button" Click="@(() => NavigateTo("Rider-Confirmation"))"> Confirm Ride </RadzenText>
                        </RadzenCard>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
                }
            </div>
        </RadzenCard>


        @* Friends List Card on bottom *@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
            <MudText Typo="Typo.h5"><b>Friends List</b></MudText>
            @if (friends != null && friends.Count > 0)
            {
                @foreach (var friend in friends)
                {
                    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:60%; padding: 16px; display: flex; align-items: center; gap: 16px;">
                        @if (!string.IsNullOrEmpty(friend.ProfilePicture))
                        {
                            <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(Convert.FromBase64String(friend.ProfilePicture))}")" alt="Profile Picture" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                        }
                        else
                        {
                            <img src="https://cdn.create.vista.com/api/media/medium/137014128/stock-vector-user-profile-icon?token" alt="Default Profile" style="width: 75px; height: 75px; border-radius: 50%; object-fit: cover;" />
                        }

                        <div>
                            <MudText Typo="Typo.h6">@friend.Name</MudText>
                            <RadzenButton Text="View User" Click="@(() => ViewUser(friend.Email))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                        </div>
                    </RadzenCard>
                }
            }
            else
            {
                <MudText Typo="Typo.h6">No friends found.</MudText>
            }
        </RadzenCard>
    </Authorized>

    @* User is not logged in *@
    <NotAuthorized>
        <MudGrid>
            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenStack Style="display: flex; align-items: center; justify-content: center; margin: 0 10px;">
                    <MudImage Src="https://scontent-mia3-1.xx.fbcdn.net/v/t39.30808-6/337879099_1147060015965896_3147312146304339976_n.jpg?stp=dst-jpg_tt6&_nc_cat=100&cb=99be929b-6bbdfb60&ccb=1-7&_nc_sid=cc71e4&_nc_ohc=hQzfuzI0_j8Q7kNvgGO-P4D&_nc_ht=scontent-mia3-1.xx&_nc_gid=AS7qWpThdZHOwZYAbs2FwSW&oh=00_AYDyTW7_8P3P5lMY4yvGez0Ah83Y4xjEjjANsTmFruUo8w&oe=670F557C"
                              Style="max-width: 100%; height: auto;"
                              Alt="Florida Tech"
                              Elevation="25"
                              Class="rounded-lg" />
                </RadzenStack>
            </MudItem>

            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenCard Class="rz-my-12" Style="flex: 1; margin: 0 10px;">
                    <LoginForm />
                </RadzenCard>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string userName;
    private string userRole = "rider"; // Set the default role, adjust if dynamic role data is needed
    private List<GroupScheduleModel> upcomingTrips = new();
    private List<Friend> friends = new();
    private int ID = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;

            // GroupID for testing
            int groupIDValue = 10;

            var groupSchedules = await _dbGroupSchedule.GetScheduleForGroup(groupIDValue);
            if (groupSchedules != null)
            {
                upcomingTrips.AddRange(groupSchedules);
            }

            // Get user ID
            var userList = await _dbUsers.GetUser(userName);
            if (userList.Any())
            {
                var inputModel = userList.First();
                ID = inputModel.UserId;

                // Fetch friends
                var friendList = await _dbFriends.GetFriends(ID);
                foreach (var dataFriend in friendList)
                {
                    List<UsersModel> temp;
                    if (dataFriend.UserId1 == ID)
                    {
                        temp = await _dbUsers.GetUser(dataFriend.UserId2);
                    }
                    else
                    {
                        temp = await _dbUsers.GetUser(dataFriend.UserId1);
                    }

                    if (dataFriend.Status.Equals("accepted") && temp.Any())
                    {
                        friends.Add(new Friend { Name = $"{temp.First().FirstName} {temp.First().LastName}" });
                    }
                }
            }
        }
    }

    private void ViewUser(string email)
    {
        NavigationManager.NavigateTo($"/Other-User-Details/{email}");
    }
    private void NavigateTo(string page)
    {
        NavigationManager.NavigateTo($"/{page}");
    }

    public class Friend
    {
        public string Name { get; set; }
        public string ProfilePicture { get; set; }
        public string Email { get; set; } // Add email property to navigate to user details
    }
}
