@page "/"
@using DataAccessLibrary.Model.Logic_Models
@using FITCarpoolWebApp.Components.Account.Shared
@using FITCarpoolWebApp.Components.Group_Pages.GroupViewComponents
@using MudBlazor
@using Radzen.Blazor
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUsersData _dbUsers
@inject IFriendsData _dbFriends
@inject IGroupScheduleData _dbGroupSchedule
@inject ICarpoolGroupsData _dbCarpoolGroups
@inject IRolesData _dbRoles
@inject IGroupRecommendationData _dbGroupRec
@inject Radzen.DialogService DialogService;

<AuthorizeView>
    @*User is logged in *@
    <Authorized>
        <MudText Typo="Typo.body1" Class="welcome-text">Welcome, @userModel.FirstName @userModel.LastName!</MudText>
        @*Todays trips*@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 100%; overflow-x: auto;">
            <MudText Typo="Typo.h3" Align="Align.Start"><b>Today's Trip</b></MudText>
            <div style="display: flex; flex-direction: row; gap: 20px;">
                @if (upcomingTrips != null && upcomingTrips.Count > 0)
                {
                    var today = DateTime.Today;

                    var todayTrips = upcomingTrips.Where(trip => trip.Start.Date == today).ToList();

                    if (todayTrips.Count > 0)
                    {
                        @foreach (var trip in todayTrips)
                        {
                            <RadzenCard Class="rz-my-12" Style="min-width: 300px; width: auto;">
                                <MudText Typo="Typo.h4" Align="Align.Center">Day: @trip.Day</MudText>
                                <MudText Typo="Typo.h5" Align="Align.Center">Date: @trip.Start.ToString("MMMM dd, yyyy") at @trip.Start.ToString("hh:mm tt")</MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">
                                    Direction: @(trip.Direction == "arrival" ? "Arriving to Campus" : "Departing from Campus")
                                </MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">Role: @userRole</MudText>

                                <RadzenButton Text="Confirm Ride" Click="@(() => NavigateToRiderConfirmation(trip.GroupID))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">No rides today.</MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No rides today.</MudText>
                }
            </div>


        </RadzenCard>

        
        @* Recommend Groups Card on top *@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 100%; overflow-x: auto;">
            <RadzenRow>
                <RadzenColumn Width="70%">
                    <MudText Typo="Typo.h3" Align="Align.Start"><b>Upcoming Recommended Groups</b></MudText>
                </RadzenColumn>
                <RadzenColumn Width="30%" Style="text-align: right;">
                    <RadzenButton Text="Find a Group!" Click="@(() => NavigateTo("FindGroups"))" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
            </RadzenRow>
            @*Group Recommendation for the Upcoming Week*@
            <div style="display: flex; flex-direction: row; gap: 20px; overflow-x: auto; padding: 10px;">
                @if (NextWeekRecommendations.Count > 0)
                {
                    @foreach (var recommendation in NextWeekRecommendations)
                    {
                        <RadzenCard Class="rz-my-12" Style="min-width: 300px; width: auto;">
                            <MudText Typo="Typo.h4" Align="Align.Center">@recommendation.GetDaysOfWeek()</MudText>
                            <MudText Typo="Typo.h5" Align="Align.Center">Date: @recommendation.GetFormattedDateRange()</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">
                                Direction: @(recommendation.Direction == "arrival" ? "Arriving to Campus" : "Departing from Campus")
                            </MudText>
                            <MudStack>
                                <RadzenButton Text="Accept" Click="@(() => AcceptGroupRecommendation(recommendation))" Style="width: 100%; background-color: green;" />
                                <RadzenButton Text="Decline" Click="@(() => DeclineGroupRecommendation(recommendation))" Style="width: 100%; background-color: red;" />
                                <RadzenButton Text="View" Click="@(() => ShowGroupDetails(recommendation))" Style="width: 100%; background-color: blue;" />

                            </MudStack>
                        </RadzenCard>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No Pending Group Recommendations.</MudText>
                }
            </div>
        </RadzenCard>


        @* Future Trips *@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 100%; overflow-x: auto;">
            <RadzenRow>
                <RadzenColumn Width="70%">
                    <MudText Typo="Typo.h3" Align="Align.Start"><b>Future Trips</b></MudText>
                </RadzenColumn>
                
            </RadzenRow>

            <div style="display: flex; flex-direction: row; gap: 20px; overflow-x: auto; padding: 10px;">
                @if (upcomingTrips != null && upcomingTrips.Count > 0)
                {
                    var today = DateTime.Today;

                    var futureTrips = upcomingTrips
                    .Where(trip => trip.Start.Date > today)
                    .OrderBy(trip => trip.Start)
                    .ToList();


                    if (futureTrips.Count > 0)
                    {
                        @foreach (var trip in futureTrips)
                        {
                            <RadzenCard Class="rz-my-12" Style="min-width: 300px; width: auto;">
                                <MudText Typo="Typo.h4" Align="Align.Center">Day: @trip.Day</MudText>
                                <MudText Typo="Typo.h5" Align="Align.Center">Date: @trip.Start.ToString("MMMM dd, yyyy") at @trip.Start.ToString("hh:mm tt")</MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">
                                    Direction: @(trip.Direction == "arrival" ? "Arriving to Campus" : "Departing from Campus")
                                </MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">Role: @userRole</MudText>

                                <RadzenButton Text="Confirm Ride" Click="@(() => NavigateToRiderConfirmation(trip.GroupID))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
                }
            </div>
        </RadzenCard>

        @* Past Trips *@
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 100%; overflow-x: auto;">
            <RadzenRow>
                <RadzenColumn Width="70%">
                    <MudText Typo="Typo.h3" Align="Align.Start"><b>Past Trips</b></MudText>
                </RadzenColumn>

            </RadzenRow>

            <div style="display: flex; flex-direction: row; gap: 20px; overflow-x: auto; padding: 10px;">
                @if (upcomingTrips != null && upcomingTrips.Count > 0)
                {
                    var today = DateTime.Today;

                    var pastTrips = upcomingTrips
                    .Where(trip => trip.Start.Date < today)
                    .OrderBy(trip => trip.Start)
                    .ToList();

                    if (pastTrips.Count > 0)
                    {
                        @foreach (var trip in pastTrips)
                        {
                            <RadzenCard Class="rz-my-12" Style="min-width: 300px; width: auto;">
                                <MudText Typo="Typo.h4" Align="Align.Center">Day: @trip.Day</MudText>
                                <MudText Typo="Typo.h5" Align="Align.Center">Date: @trip.Start.ToString("MMMM dd, yyyy") at @trip.Start.ToString("hh:mm tt")</MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">
                                    Direction: @(trip.Direction == "arrival" ? "Arriving to Campus" : "Departing from Campus")
                                </MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">Role: @userRole</MudText>

                                <RadzenButton Text="Confirm Ride" Click="@(() => NavigateToAfterTrip(trip.GroupID))" Style="width: 100%; background-color: #D3D3D3; color: #333;" />
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
                }
            </div>
        </RadzenCard>



        
    </Authorized>

    <NotAuthorized>
        <MudGrid>
            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenStack Style="display: flex; align-items: center; justify-content: center; margin: 0 10px;">
                    <MudImage Src="https://scontent-mia3-1.xx.fbcdn.net/v/t39.30808-6/337879099_1147060015965896_3147312146304339976_n.jpg?stp=dst-jpg_tt6&_nc_cat=100&cb=99be929b-6bbdfb60&ccb=1-7&_nc_sid=cc71e4&_nc_ohc=hQzfuzI0_j8Q7kNvgGO-P4D&_nc_ht=scontent-mia3-1.xx&_nc_gid=AS7qWpThdZHOwZYAbs2FwSW&oh=00_AYDyTW7_8P3P5lMY4yvGez0Ah83Y4xjEjjANsTmFruUo8w&oe=670F557C"
                              Style="max-width: 100%; height: auto;"
                              Alt="Florida Tech"
                              Elevation="25"
                              Class="rounded-lg" />
                </RadzenStack>
            </MudItem>

            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenCard Class="rz-my-12" Style="flex: 1; margin: 0 10px;">
                    <LoginForm />
                </RadzenCard>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string userName;
    private string userRole = "rider";
    private List<GroupScheduleModel> upcomingTrips = new();
    private List<Friend> friends = new();
    private int ID = 0;
    public UsersModel userModel = new();
    private List<RecomendedGroup> NextWeekRecommendations = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }
        userName = user.Identity.Name;
        var userList = await _dbUsers.GetUser(userName);
        if (!userList.Any())
        {
            return;
        }
        // Fetch user details

        userModel = userList.First();
        ID = userModel.UserId;
        // Fetch all groups for the user
        var userGroups = await _dbCarpoolGroups.GetCurrentGroups(ID);
        if (userGroups.Any())
        {
            foreach (var group in userGroups)
            {
                int groupID = group.Item1;

                // Use each retrieved group ID to get the schedule
                var groupSchedules = await _dbGroupSchedule.GetScheduleForGroup(groupID);
                if (groupSchedules != null)
                {
                    upcomingTrips.AddRange(groupSchedules);
                }

            }
        }
        // Fetch friends
        var friendList = await _dbFriends.GetFriends(ID);
        foreach (var dataFriend in friendList)
        {
            List<UsersModel> temp;
            if (dataFriend.UserId1 == ID)
            {
                temp = await _dbUsers.GetUser(dataFriend.UserId2);
            }
            else
            {
                temp = await _dbUsers.GetUser(dataFriend.UserId1);
            }

            if (dataFriend.Status.Equals("accepted") && temp.Any())
            {
                friends.Add(new Friend { Name = $"{temp.First().FirstName} {temp.First().LastName}" });
            }
        }
        // Pull Next Week Recomendation from the GroupRecomendation & GroupRecomendation Membership table
        var GroupRec = await _dbGroupRec.GetUsersUpcomingRecommendations(userModel.UserId);
        if (GroupRec != null)
        {
            NextWeekRecommendations.AddRange(GroupRec);
        }
        else
        {
            Console.WriteLine("No Groups Found");
        }
    }

    private void NavigateToRiderConfirmation(int groupId)
    {
        var url = $"/Rider-Confirmation?groupId={Uri.EscapeDataString(groupId.ToString())}";
        NavigationManager.NavigateTo(url);
    }
    private void NavigateToAfterTrip(int groupId)
    {
        var url = $"/After-Trip?groupId={Uri.EscapeDataString(groupId.ToString())}";
        NavigationManager.NavigateTo(url);
    }

    private void ViewUser(string email)
    {
        NavigationManager.NavigateTo($"/Other-User-Details/{email}");
    }
    private void NavigateTo(string page)
    {
        NavigationManager.NavigateTo($"/{page}");
    }
    private async Task ShowGroupDetails(RecomendedGroup group)
    {
        var parameters = new Dictionary<string, object> { { "CurrentGroup", group } };
        var options = new Radzen.DialogOptions
            {
                Width = "100%",
                CloseDialogOnOverlayClick = true
            };

        await DialogService.OpenAsync<ViewGroupDialog>("View Group", parameters, options);
    }
    public class Friend
    {
        public string Name { get; set; }
        public string ProfilePicture { get; set; }
        public string Email { get; set; }
    }
    public async Task DeclineGroupRecommendation(RecomendedGroup group)
    {
        await _dbGroupRec.DeclineGroupRec(group, userModel.UserId);
        NextWeekRecommendations.Remove(group);
    }
    public async Task AcceptGroupRecommendation(RecomendedGroup group)
    {
        await _dbGroupRec.AcceptGroupRec(group, userModel.UserId);
        NextWeekRecommendations.Remove(group);
    }
}
<style>
    .welcome-text {
        font-size: 2.5rem; /* Default for larger screens */
    }

    media (max-width: 768px) {
        .welcome-text

    {
        font-size: 1.5rem; /* Smaller font size for mobile */
        text-align: center; /* Center-align for smaller screens */
    }

    }
</style>