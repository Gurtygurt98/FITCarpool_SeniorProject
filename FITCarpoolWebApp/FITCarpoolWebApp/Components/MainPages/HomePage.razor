@page "/"

@using FITCarpoolWebApp.Components.Account.Shared
@using MudBlazor
@using Radzen.Blazor
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUsersData _dbUsers
@inject IFriendsData _dbFriends
@inject IGroupScheduleData _dbGroupSchedule

<AuthorizeView>
    @* User is logged in *@
    <Authorized>
        <MudText Typo="Typo.h2">Welcome, @userName!</MudText>

        <RadzenCard class="rz-my-12" Style="width: 60%; height: auto; margin-left: 0; display: inline-block;">
            <MudText Typo="Typo.h5"><b>Upcoming Rides</b></MudText>
            @if (upcomingTrips != null && upcomingTrips.Count > 0)
            {
                @foreach (var trip in upcomingTrips)
                {
                    <MudText Typo="Typo.h6">Day: @trip.Day</MudText>
                    <MudText Typo="Typo.h6">Start Time: @trip.Start.ToString("hh:mm tt")</MudText>
                    <MudText Typo="Typo.h6">Direction: @trip.Direction</MudText>
                    <MudDivider />
                }
            }
            else
            {
                <MudText Typo="Typo.h6">No upcoming rides found.</MudText>
            }
        </RadzenCard>

        <RadzenCard class="rz-my-12" Style="width: 30%; height: auto; display: inline-block; vertical-align: top;">
            <MudText Typo="Typo.h5"><b>Friends List</b></MudText>
            @if (friends != null && friends.Count > 0)
            {
                @foreach (var friend in friends)
                {
                    <MudText Typo="Typo.h6">@friend.Name</MudText>
                }
            }
            else
            {
                <MudText Typo="Typo.h6">No friends found.</MudText>
            }
        </RadzenCard>
    </Authorized>



    @*User is not logged in *@
    <NotAuthorized>

        <MudGrid>
            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenStack Style="display: flex; align-items: center; justify-content: center; margin: 0 10px;">
                    <MudImage Src="https://scontent-mia3-1.xx.fbcdn.net/v/t39.30808-6/337879099_1147060015965896_3147312146304339976_n.jpg?stp=dst-jpg_tt6&_nc_cat=100&cb=99be929b-6bbdfb60&ccb=1-7&_nc_sid=cc71e4&_nc_ohc=hQzfuzI0_j8Q7kNvgGO-P4D&_nc_ht=scontent-mia3-1.xx&_nc_gid=AS7qWpThdZHOwZYAbs2FwSW&oh=00_AYDyTW7_8P3P5lMY4yvGez0Ah83Y4xjEjjANsTmFruUo8w&oe=670F557C"
                              Style="max-width: 100%; height: auto;"
                              Alt="Florida Tech"
                              Elevation="25"
                              Class="rounded-lg" />
                </RadzenStack>
            </MudItem>

            <MudItem xs="12" sm="6" md="6" lg="6">
                <RadzenCard Class="rz-my-12" Style="flex: 1; margin: 0 10px;">
                    <LoginForm />
                </RadzenCard>
            </MudItem>


        </MudGrid>

    </NotAuthorized>
</AuthorizeView>


@code {
    private string userName;
    private List<GroupScheduleModel> upcomingTrips = new();
    private List<Friend> friends = new();
    private int ID = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;

            // GroupID for testing
            int groupIDValue = 10;

            var groupSchedules = await _dbGroupSchedule.GetScheduleForGroup(groupIDValue);
            if (groupSchedules != null)
            {
                upcomingTrips.AddRange(groupSchedules);
            }

            // Get user ID
            var userList = await _dbUsers.GetUser(userName);
            if (userList.Any())
            {
                var inputModel = userList.First();
                ID = inputModel.UserId;

                // Fetch friends
                var friendList = await _dbFriends.GetFriends(ID);
                foreach (var dataFriend in friendList)
                {
                    List<UsersModel> temp;
                    if (dataFriend.UserId1 == ID)
                    {
                        temp = await _dbUsers.GetUser(dataFriend.UserId2);
                    }
                    else
                    {
                        temp = await _dbUsers.GetUser(dataFriend.UserId1);
                    }

                    if (dataFriend.Status.Equals("accepted") && temp.Any())
                    {
                        friends.Add(new Friend { Name = $"{temp.First().FirstName} {temp.First().LastName}" });
                    }
                }
            }
        }
    }

    public class Friend
    {
        public string Name { get; set; }
    }
}

