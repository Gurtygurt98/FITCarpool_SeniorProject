@page "/Driver"
@using DataAccessLibrary.Data.API
@using DataAccessLibrary.Model
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model.Database_Models
@using FITCarpoolWebApp.Components.MainPages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService
@inject HttpClient httpClient
@inject IUsersData _dbUsers
@inject IGroupMemberLocationsData _dbLocation
@inject IGMapsAPI _GmapKey
@inject IJSRuntime JSRuntime
@inject ICarpoolGroupsData _dbGroups
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize]
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            @if (!carpoolInProgress && GroupList.Any())
            {
                // Display Data Grid to allow user to start trips based on GroupList Retrivied in Intialization Method
                <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H5" class="rz-color-primary">Please Select a Group to Start</RadzenText>
                <RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                                WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                                Data="@GroupList" TItem="CarpoolGroupsModel" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Template Context="group">
                        <RadzenCard Style="width: 100%; padding: 0;">
                            <RadzenStack Gap="1">

                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-primary">Group: @(group.GroupName)</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Destination: @(group.Destination)</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Riders: @(group.ListRiderNames())</RadzenText>

                                <RadzenButton Text="Start Trip" Click="@(() => StartTrip(group))" Style="width: 100%" />
                            </RadzenStack>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>


            }
            else if (!carpoolInProgress && !GroupList.Any())
            {
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-color-primary">You aren't a driver for any group!</RadzenText>

            }
            else
            {
                <RadzenText Style="font-size: 16px;" Tag="h5" Class="text-primary">
                    Group Name: @CurrentGroup?.GroupName
                </RadzenText>
                @if (!locationAvailable)
                {
                    <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Please click below to allow location services</RadzenText>
                    // A button that prompts the user for their location to start the and is labeled Start Trip
                    <MudButton OnClick="@GetUserLocation" Style="margin-top: 20px;">Prompt for User Location</MudButton>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-color-primary">Select your location refresh rate</RadzenText>
                    <MudSelect T="int" Value="LocationRefreshRate" MultiSelection="false" ValueChanged="@(value =>OnRefreshRateChanged(value))">
                        <MudSelectItem T="int" Value="10"> 10 </MudSelectItem>
                        <MudSelectItem T="int" Value="30"> 30 </MudSelectItem>
                        <MudSelectItem T="int" Value="60"> 60 </MudSelectItem>
                    </MudSelect>
                    <div>
                        <RadzenText>Current Location:</RadzenText>
                        <RadzenText>Latitude: @userLocation.Latitude, Longitude: @userLocation.Longitude</RadzenText>
                            <MudButton OnClick="@EndRoute" Style="margin-top: 20px;">End Route</MudButton>
                        </div>
                }

                // Need to make calls to get the users location in this

                // A button that allows the user to cancel starting this trip, this sets carpoolInProgress back to false which brings the user to the if statement
                // Once the user allows location and the trip starts every 30 seconds ( possibly add a dial for this) this page will update the database with the drivers current location

            }
        </RadzenStack>
    </RadzenCard>


    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h5" Style=""> Consider downloading Fl Tech Safe App for safety features!</MudText>
            <MudImage Src="https://www.fit.edu/media/site-specific/wwwfitedu/marketing-amp-comm/images/florida-tech-safe.JPG"
                      Alt="Profile"
                      Style="width: 100px; height: 100px; cursor: pointer;"
                      Click="@(() => NavigateTo("https://play.google.com/store/apps/details?id=com.cutcom.apparmor.floridatech&pli=1"))" />
            <MudImage Src="https://www.fit.edu/media/site-specific/wwwfitedu/marketing-amp-comm/images/florida-tech-safe.JPG"
                      Alt="Profile"
                      Style="width: 100px; height: 100px; cursor: pointer;"
                      Click="@(() => NavigateTo("https://play.google.com/store/apps/details?id=com.cutcom.apparmor.floridatech&pli=1"))" />

        </RadzenStack>

    </RadzenCard>

</RadzenStack>
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h3">Overall Finish Time: @overallFinishTime</MudText>
                <MudText Typo="Typo.h4">Pickup Locations:</MudText>

                @foreach (var address in pickupAddresses)
            {
                <div>
                    <span>@address</span>
                    <span style="margin-left: 10px;">ETA: @GetETA(address)</span>
                </div>
            }
            <RadzenButton Text="Generate Directions" Click="@(() => GenerateDirections())" Style="margin-top: 20px;" />
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    List<CarpoolGroupsModel> GroupList = new();
    GroupMemberLocationsModel DriverLocation = new();
    List<GroupMembersModel> GroupMembersList = new();
    CarpoolGroupsModel CurrentGroup = new();
    private string? MapApi = null;
    UsersModel InputModel = new();
    private string userName = "Not found";
    string overallFinishTime = "6:00 PM";
    bool carpoolInProgress = false;
    bool allowVirtualization = true;
    private bool IsTripStarted = false;
    private Location userLocation = new Location();
    private bool locationAvailable = false;
    private int LocationRefreshRate = 30;
    private System.Threading.Timer? locationRefreshTimer;
    protected override async Task OnInitializedAsync()
    {
        // Retrive the google maps api key
        MapApi = _GmapKey.MapAPI;
        // Get user profile information
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
        else
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        List<UsersModel> UserList = await _dbUsers.GetUser(userName);
        if (UserList.Any())
        {
            InputModel = UserList.First();
            Console.WriteLine(InputModel.FirstName + " " + InputModel.UserId);
        }
        else
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        // Check if the user is already in progress of route
        List<GroupMemberLocationsModel> DriverLocationList = await _dbLocation.GetGroupMemberLocation(InputModel.UserId);
        carpoolInProgress = DriverLocationList.Any();
        // Get what Groups the user is a driver of since they dont have any routes in progress
        GroupList = await _dbGroups.GetDriverGroups(InputModel.UserId);

        if (carpoolInProgress)
        {
            // Current driver location object, send this along with updated location to the database for riders to grab
            DriverLocation = DriverLocationList.First();
            CurrentGroup = GroupList.FirstOrDefault(group => group.GroupId.Equals(DriverLocation.GroupID));
        }
    }
    List<string> pickupAddresses = new List<string>
    {
        "123 Main St, City, State, Zip",
        "456 Elm St, City, State, Zip",
        "789 Oak St, City, State, Zip"
    };
    private async Task GetUserLocation()
    {
        if (locationAvailable)
        {
            await JSRuntime.InvokeVoidAsync("requestUserLocation", DotNetObjectReference.Create(this));
        }
        else
        {
            locationAvailable = await JSRuntime.InvokeAsync<bool>("confirm", "Allow this site to access your location, please exit page if you don't want to allow?");
            OnRefreshRateChanged(LocationRefreshRate);

            GetUserLocation();
        }
    }
    private async Task EndRoute()
    {
        carpoolInProgress = false;
        _dbLocation.DeleteGroupMemberLocation(DriverLocation.LocationId);
        NavigationManager.NavigateTo("/Driver", forceLoad: true);

    }
    [JSInvokable]
    public async void HandleSuccess(double latitude, double longitude)
    {
        userLocation.Latitude = latitude;
        userLocation.Longitude = longitude;
        DateTime currentTime = DateTime.Now;
        Console.WriteLine($"Updated Location - Latitude: {latitude}, Longitude: {longitude}, Time: {currentTime.ToString("HH:mm:ss")}");
        // Carpool is not started yet, meaning no entry in the database was created
        if (DriverLocation.LocationId == 0)
        {
            //GroupMemberLocationsModel(int locationId, int userId, int groupId, double latitude, double longitude, DateTime timestamp)
            DriverLocation = new GroupMemberLocationsModel(InputModel.UserId, CurrentGroup.GroupId, latitude, longitude, currentTime);
            await _dbLocation.AddGroupMemberLocation(DriverLocation);
            List<GroupMemberLocationsModel> DriverLocationList = await _dbLocation.GetGroupMemberLocation(InputModel.UserId);
            DriverLocation = DriverLocationList.FirstOrDefault();

        }
        else
        {
            DriverLocation.Latitude = latitude;
            DriverLocation.Longitude = longitude;
            DriverLocation.Timestamp = currentTime;
            CurrentGroup = GroupList.FirstOrDefault(group => group.GroupId.Equals(DriverLocation.GroupID));
            await _dbLocation.UpdateGroupMemberLocation(DriverLocation);
        }
        // Need to create call to either add or update user location in database
        InvokeAsync(StateHasChanged); // Ensure UI is updated with new location
    }

    [JSInvokable]
    public void HandleError(string error)
    {
        Console.WriteLine($"Error getting location: {error}");
        // Handle error here
    }

    private class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
    private string GetETA(string address)
    {

        Random rnd = new Random();
        int minutes = rnd.Next(15, 31);
        return DateTime.Now.AddMinutes(minutes).ToString("h:mm tt");
    }

    private void GenerateDirections()
    {

    }
    private void StartTrip(CarpoolGroupsModel group)
    {
        CurrentGroup = group;
        Console.WriteLine("Group " + group.GroupName);
        carpoolInProgress = true;
    }
    private void OnRefreshRateChanged(int value)
    {
        LocationRefreshRate = value;
        // Convert refresh rate from seconds to milliseconds
        int period = LocationRefreshRate * 1000;

        if (locationRefreshTimer != null)
        {
            locationRefreshTimer.Change(0, period);
        }
        else
        {
            locationRefreshTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(() =>
                {
                    GetUserLocation();
                });
            }, null, 0, period);
        }
    }
    public void Dispose()
    {
        locationRefreshTimer?.Dispose();
    }

    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url, true);
    }
}
