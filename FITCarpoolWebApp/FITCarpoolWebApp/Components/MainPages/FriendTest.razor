@page "/FriendsTest"
@using MudBlazor
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IRolesData _dbRoles
@inject IDialogService DialogService
@inject IUsersData _dbUsers
@inject IFriendsData _dbFriends

@attribute [Authorize]

<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack style="margin-bottom: 50px;">
            <MudText Typo="Typo.h2" Align="Align.Center">Friends List</MudText>
            <MudAutocomplete T="string" @bind-Value="_searchString"
                             SearchFunc="@SearchUser"
                             Placeholder="Search for other users..."
                             Dense="true"
                             ResetValueOnEmptyText="true"
                             ToStringFunc="@((string s) => s)" />
        </RadzenStack>

        @foreach (var row in friends)
        {
            <RadzenRow>
                <RadzenColumn>
                    @row.Name
                </RadzenColumn>
                <RadzenColumn>
                    @row.Status
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => OnClick("Invite Sent")) Text="Invite to Group" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => RemoveFriend(row, "Friend Removed")) Text="Remove Friend" ButtonStyle="ButtonStyle.Danger" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>

<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
        <RadzenStack>
            <MudText Typo="Typo.h2" Align="Align.Center">Incoming Friend Requests</MudText>
        </RadzenStack>
        @foreach (var row in requests)
        {
            <RadzenRow>
                <RadzenColumn>
                    @row.Name
                </RadzenColumn>
                <RadzenColumn>
                    @row.Status
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => AcceptFriendRequest(row)) Text="Accept" ButtonStyle="ButtonStyle.Primary" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(args => DeclineFriendRequest(row)) Text="Decline" ButtonStyle="ButtonStyle.Danger" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>

@code {
    private void OnClick(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = message });
    }

    private void OnClick2(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }

    private void RemoveFriend(Friend f, string message)
    {
        // Hardcoded removal logic
        friends.Remove(f);
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message });
    }

    private void AcceptFriendRequest(Friend f)
    {
        // Simulate friend request acceptance
        f.Status = "accepted";
        friends.Add(f);
        requests.Remove(f);
    }

    private void DeclineFriendRequest(Friend f)
    {
        requests.Remove(f);
    }

    private int ID = 0;
    private string userName = "Not Found";
    List<UsersModel> UserList = null;
    List<FriendsModel> FriendList = new();
    private List<Friend> friends;
    private List<Friend> requests;
    UsersModel InputModel = null;

    private string _searchString = "";
    private List<UsersModel> AccountList = new();

    protected override async Task OnInitializedAsync()
    {
        // Hardcoded current user data
        ID = 1;  // Hardcoded user ID
        userName = "John Doe";  // Hardcoded user name

        // Simulating adding a hardcoded friend
        var hardcodedFriend = new Friend
            {
                FriendId = 10001,
                ID1 = ID,
                ID2 = 2,  // Simulated friend's ID
                Name = "Jane Smith",  // Hardcoded friend name
                Status = "Recently Online"
            };

        friends = new List<Friend> { hardcodedFriend };  // Adding the hardcoded friend
        requests = new List<Friend>();

        // Optionally you could simulate a friend request
        var simulatedRequest = new Friend
            {
                FriendId = 10002,
                ID1 = 3,  // Simulated requester ID
                ID2 = ID,
                Name = "Mike Johnson",  // Hardcoded requester name
                Status = "Pending"
            };

        requests.Add(simulatedRequest);

        // Simulate pulling all users (hardcoded)
        AccountList = new List<UsersModel>
        {
            new UsersModel { UserId = 2, FirstName = "Jane", LastName = "Smith" },
            new UsersModel { UserId = 3, FirstName = "Mike", LastName = "Johnson" }
        };
    }

    public class Friend
    {
        public int FriendId { get; set; }
        public int ID1 { get; set; }
        public int ID2 { get; set; }
        public string? Name { get; set; }
        public string? Status { get; set; }
    }

    private async Task<IEnumerable<string>> SearchUser(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<string>();

        return AccountList
            .Where(a => (a.FirstName + " " + a.LastName).Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(a => (a.FirstName + " " + a.LastName))
            .ToList();
    }
}
