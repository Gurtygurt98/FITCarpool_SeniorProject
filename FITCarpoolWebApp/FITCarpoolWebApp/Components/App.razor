<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="FITCarpoolWebApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script>
        function requestUserLocation(dotNetReference) {
            navigator.geolocation.getCurrentPosition(
                position => dotNetReference.invokeMethodAsync('HandleSuccess', position.coords.latitude, position.coords.longitude),
                error => dotNetReference.invokeMethodAsync('HandleError', error.message)
            );
        }
        function openInNewTab(url) {
            window.open(url, '_blank');
        }
        window.initializeGroupMap = (mapId, apiKey, locations) => {
            if (!window.google || !window.google.maps) {
                const script = document.createElement('script');
                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap`;
                script.async = true;
                script.onerror = () => console.error('Google Maps script failed to load');
                document.head.appendChild(script);
            }

            window.initMap = () => {
                if (!locations || locations.length === 0) {
                    console.error('No locations provided for the map');
                    return;
                }

                const map = new google.maps.Map(document.getElementById(mapId), {
                    zoom: 12,
                    center: { lat: locations[0].Latitude, lng: locations[0].Longitude },
                    gestureHandling: 'greedy'
                });

                locations.forEach(location => {
                    const marker = new google.maps.Marker({
                        position: { lat: location.Latitude, lng: location.Longitude },
                        map: map,
                        title: location.Name
                    });
                    console.log('Added marker:', location);
                });
            };
        };


    </script>



</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : InteractiveServer;
}
